Przykladowe zadanie, które moze byc na drugiej laborce: 

Wykorzystujac wybrane funkcje modelowania geo. biblioteki OpenGL i GLUT napisac program przedstawiajacy perspektywiczny obraz pierscienia o srodku na osi Y lezacego na plaszczyznie XZ o zadanych parametrach. 

Uzytkownik za pomoca klawiatury powinien miec mozliwosc: 
- wprowadzania liczby podzialów bryly w zakresie od 6 do 30 (nie trzeba pobierac tej ilosci, wystarcza jakies klawisze tak jak zrobione jest w naszych zadaniach, które zwiekszaja i zmniejszaja co 1) 
- zmiany odleglosci obserwatora od obiektu 
- zmiany orientacji oberwatora (obroty wzgledem osi X, Y, Z) 

Zestaw 18. Promien wewnetrzny: 15, przekrój: romb o boku 5, kacie alfa=30 stopni i krótszej przekatnej równoleglej do plaszczyzny XZ. Tryb modelowania: GL_QUAD_STRIP. Zadanie ocenione na 5: 
Kod:
////////////////////////////////////////////////////////////////////////////////////////// 
// 
// Program wyswietlajacy szescian w rzucie perspektywicznym. Dlugosc boku szescianu 
// moze byc interaktywnie zmieniana za pomoca klwiszy '+' i '-'. 
// 
////////////////////////////////////////////////////////////////////////////////////////// 
#include <GL/glut.h> 
#include <math.h> 

// Definicja stalych 
#define DLUGOSC_BOKU            5.0 
#define OBSERWATOR_ODLEGLOSC    20.0 
#define OBSERWATOR_OBROT_X      20.0 
#define OBSERWATOR_OBROT_Y      20.0 
#define OBSERWATOR_OBROT_Z        0.0 
#define OBSERWATOR_FOV_Y        30.0  

// Zmienne globalne 
double  bok           = DLUGOSC_BOKU; // Dlugosc boku szescianu 
int        l_podz          = 6; 
int     szerokoscOkna = 800; 
int     wysokoscOkna  = 600; 
double obserwator_odleglosc = OBSERWATOR_ODLEGLOSC; 
double obserwator_obrot_x = OBSERWATOR_OBROT_X; 
double obserwator_obrot_y = OBSERWATOR_OBROT_Y; 
double obserwator_obrot_z = OBSERWATOR_OBROT_Z; 

// Prototypy funkcji 
void RysujSzescian(double n); 
void UstawParametryWidoku(int szer, int wys); 
void WyswietlObraz(void); 
void ObslugaKlawiatury(unsigned char klawisz, int x, int y); 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja rysujaca szescian o boku "a" w trybie GL_QUAD_STRIP. 
// Srodek szescianu znajduje sie w punkcie (0,0,0). 

double DEG2RAD(double deg) 
{ 
    return (deg * 3.1415926) / 180; 
} 


void RysujSzescian(double a, int n) 
{ 
  // Sciany boczne 
  double dAlfa = 360.0 / (double)n; 
  int i; 
  double alfa = 30; 
  double s_pol = a * sin(DEG2RAD(alfa / 2)); 
  double h_pol = a * cos(DEG2RAD(alfa / 2)); 
  double r_we = 15.0, r_s = r_we + s_pol, r_ze = r_we + 2 * s_pol; 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r_we * cos(DEG2RAD(i * dAlfa)), 0, r_we * sin(DEG2RAD(i * dAlfa))); 
        glVertex3f(r_s * cos(DEG2RAD(i * dAlfa)), h_pol, r_s * sin(DEG2RAD(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r_s * cos(DEG2RAD(i * dAlfa)), h_pol, r_s * sin(DEG2RAD(i * dAlfa))); 
        glVertex3f(r_ze * cos(DEG2RAD(i * dAlfa)), 0, r_ze * sin(DEG2RAD(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r_ze * cos(DEG2RAD(i * dAlfa)), 0, r_ze * sin(DEG2RAD(i * dAlfa))); 
        glVertex3f(r_s * cos(DEG2RAD(i * dAlfa)), -h_pol, r_s * sin(DEG2RAD(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r_s * cos(DEG2RAD(i * dAlfa)), -h_pol, r_s * sin(DEG2RAD(i * dAlfa))); 
        glVertex3f(r_we * cos(DEG2RAD(i * dAlfa)), 0, r_we * sin(DEG2RAD(i * dAlfa))); 
    }    
  glEnd(); 


} 

////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja ustawiajaca parametry rzutu perspektywicznego i rozmiary viewportu. Powinna 
// byc wywolywana kazdorazowo po zmianie rozmiarow okna programu. 
void UstawParametryWidoku(int szer, int wys) 
{ 
  // Zapamietanie wielkosci widoku 
  szerokoscOkna = szer; 
  wysokoscOkna  = wys; 

  // Ustawienie parametrow viewportu 
  glViewport(0, 0, szerokoscOkna, wysokoscOkna); 

  // Przejscie w tryb modyfikacji macierzy rzutowania 
  glMatrixMode(GL_PROJECTION); 
  glLoadIdentity(); 
  gluPerspective(OBSERWATOR_FOV_Y, (float)szerokoscOkna/(float)wysokoscOkna, 1.0, 1000.0); 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja wyswietlajaca pojedyncza klatke animacji 
void WyswietlObraz(void) 
{ 
  // Wyczyszczenie bufora koloru i bufora glebokosci 
  glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); 

  // Przejscie w tryb modyfikacji macierzy przeksztalcen geometrycznych 
  glMatrixMode(GL_MODELVIEW); 

  // Zastapienie aktywnej macierzy macierza jednostkowa 
  glLoadIdentity(); 

  // Ustalenie polozenia obserwatora 
  glTranslatef(0, 0, -obserwator_odleglosc); 
  glRotatef(obserwator_obrot_x, 1, 0, 0); 
  glRotatef(obserwator_obrot_y, 0, 1, 0); 
  glRotatef(obserwator_obrot_z, 0, 0, 1); 

  // Narysowanie szescianu 
  RysujSzescian(bok, l_podz); 

  // Przelaczenie buforow ramki 
  glutSwapBuffers(); 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja obslugi klawiatury 
void ObslugaKlawiatury(unsigned char klawisz, int x, int y) 
{ 
  /* 
  if(klawisz == '+') 
      bok *= 2.0; 
  else if (klawisz == '-') 
      bok /= 2.0; 
  */ 
  if (klawisz == 27) 
      exit(0);      
  else if (klawisz == ']') 
  { 
      if (l_podz < 30) l_podz++; 
  } 
  else if (klawisz == '[') 
  { 
      if (l_podz > 6) l_podz--; 
  } 
  else if (klawisz == '-') 
      obserwator_odleglosc *= 0.9; 
  else if (klawisz == '+') 
      obserwator_odleglosc *= 1.1; 
  else if (klawisz == 's') 
      obserwator_obrot_x += 5; 
  else if (klawisz == 'w') 
      obserwator_obrot_x -= 5; 
  else if (klawisz == 'd') 
      obserwator_obrot_y += 5; 
  else if (klawisz == 'a') 
      obserwator_obrot_y -= 5; 
  else if (klawisz == 'q') 
      obserwator_obrot_z += 5; 
  else if (klawisz == 'e') 
      obserwator_obrot_z -= 5; 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Glowna funkcja programu 
int  main(int argc, char **argv) 
{ 
  // Zainicjowanie biblioteki GLUT 
  glutInit(&argc, argv); 

  // Ustawienie trybu wyswietlania 
  glutInitDisplayMode (GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH); 

  // Ustawienie polozenia dolenego lewego rogu okna 
  glutInitWindowPosition(100, 100); 

  // Ustawienie rozmiarow okna 
  glutInitWindowSize(szerokoscOkna, wysokoscOkna); 

  // Utworzenie okna 
  glutCreateWindow("Szescian"); 

  // Odblokowanie bufora glebokosci 
  glEnable(GL_DEPTH_TEST); 

  // Ustawienie wartosci czyszczacej zawartosc bufora glebokosci 
  glClearDepth(1000.0); 

  // Ustawienie koloru czyszczenia bufora ramki 
  glClearColor (0.0f, 0.0f, 0.3f, 0.0f); 

  // Wlaczenie wyswietlania wielokatow w postaci obrysow (przydatne w celach diagnostycznych). 
  glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); 
  
  // Zarejestrowanie funkcji (callback) odpowiedzialnej za 
  glutDisplayFunc(WyswietlObraz); 

  // Zarejestrowanie funkcji (callback) wywolywanej za kazdym razem kiedy 
  // zmieniane sa rozmiary okna 
  glutReshapeFunc(UstawParametryWidoku); 

  // Zarejestrowanie funkcji wykonywanej gdy okno nie obsluguje 
  // zadnych zadan 
  glutIdleFunc(WyswietlObraz); 

  // Zarejestrowanie funkcji obslugi klawiatury 
  glutKeyboardFunc(ObslugaKlawiatury); 

  // Obsluga glownej petli programu (wywolywanie zarejestrowanych callbackow 
  // w odpowiedzi na odbierane zdarzenia lub obsluga stanu bezczynnosci) 
  glutMainLoop(); 

  return 0; 
}


Zestaw 20 Promien wewnetrzny 15 przekrój piecikat foremny o boku 2 i jednym z boków stycznyh do plaszczyzny XZ tryb modelowania GL_QUAD_STRIP: 

Kod:
////////////////////////////////////////////////////////////////////////////////////////// 
// 
// Program wyswietlajacy szescian w rzucie perspektywicznym. Dlugosc boku szescianu 
// moze byc interaktywnie zmieniana za pomoca klwiszy '+' i '-'. 
// 
////////////////////////////////////////////////////////////////////////////////////////// 
#include <GL/glut.h> 
#include <math.h> 

// Definicja stalych 
#define DLUGOSC_BOKU            5.0 
#define OBSERWATOR_ODLEGLOSC    20.0 
#define OBSERWATOR_OBROT_X      20.0 
#define OBSERWATOR_OBROT_Y      20.0 
#define OBSERWATOR_OBROT_Z        0.0 
#define OBSERWATOR_FOV_Y        30.0  

// Zmienne globalne 
double  bok           = DLUGOSC_BOKU; // Dlugosc boku szescianu 
int        l_podz          = 6; 
int     szerokoscOkna = 800; 
int     wysokoscOkna  = 600; 
double obserwator_odleglosc = OBSERWATOR_ODLEGLOSC; 
double obserwator_obrot_x = OBSERWATOR_OBROT_X; 
double obserwator_obrot_y = OBSERWATOR_OBROT_Y; 
double obserwator_obrot_z = OBSERWATOR_OBROT_Z; 

// Prototypy funkcji 
void RysujSzescian(double n); 
void UstawParametryWidoku(int szer, int wys); 
void WyswietlObraz(void); 
void ObslugaKlawiatury(unsigned char klawisz, int x, int y); 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja rysujaca szescian o boku "a" w trybie GL_QUAD_STRIP. 
// Srodek szescianu znajduje sie w punkcie (0,0,0). 

double radian(double x) 
{ 
    return (x * 2 * 3.1415926) / 360; 
} 


void RysujSzescian(double a) 
{ 
  int n=10; 
  // Sciany boczne  
  double dAlfa = 360.0 / (double)n; 
  int i; 
  double r0 = 15, r1 = r0 + a * cos(radian(72)); 
  double r2 = r1 + a / 2.0, r3 = r1 + a, r4 = r3 + a * cos(radian(72)); 

  double h1 = a * sin(radian(72)), h2 = a * sin(radian(36)); 

  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r0 * cos(radian(i * dAlfa)), 0, r0 * sin(radian(i * dAlfa))); 
        glVertex3f(r2 * cos(radian(i * dAlfa)), h2, r2 * sin(radian(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r2 * cos(radian(i * dAlfa)), h2, r2 * sin(radian(i * dAlfa))); 
        glVertex3f(r4 * cos(radian(i * dAlfa)), 0, r4 * sin(radian(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r4 * cos(radian(i * dAlfa)), 0, r4 * sin(radian(i * dAlfa))); 
        glVertex3f(r3 * cos(radian(i * dAlfa)), -h1, r3 * sin(radian(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r3 * cos(radian(i * dAlfa)), -h1, r3 * sin(radian(i * dAlfa))); 
        glVertex3f(r1 * cos(radian(i * dAlfa)), -h1, r1 * sin(radian(i * dAlfa))); 
    }    
  glEnd(); 
  glBegin(GL_QUAD_STRIP); 
    for (i = 0; i <= n; ++i) 
    { 
        glVertex3f(r1 * cos(radian(i * dAlfa)), -h1, r1 * sin(radian(i * dAlfa))); 
        glVertex3f(r0 * cos(radian(i * dAlfa)), 0, r0 * sin(radian(i * dAlfa))); 
    }    
  glEnd(); 

} 

////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja ustawiajaca parametry rzutu perspektywicznego i rozmiary viewportu. Powinna 
// byc wywolywana kazdorazowo po zmianie rozmiarow okna programu. 
void UstawParametryWidoku(int szer, int wys) 
{ 
  // Zapamietanie wielkosci widoku 
  szerokoscOkna = szer; 
  wysokoscOkna  = wys; 

  // Ustawienie parametrow viewportu 
  glViewport(0, 0, szerokoscOkna, wysokoscOkna); 

  // Przejscie w tryb modyfikacji macierzy rzutowania 
  glMatrixMode(GL_PROJECTION); 
  glLoadIdentity(); 
  gluPerspective(OBSERWATOR_FOV_Y, (float)szerokoscOkna/(float)wysokoscOkna, 1.0, 1000.0); 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja wyswietlajaca pojedyncza klatke animacji 
void WyswietlObraz(void) 
{ 
  // Wyczyszczenie bufora koloru i bufora glebokosci 
  glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); 

  // Przejscie w tryb modyfikacji macierzy przeksztalcen geometrycznych 
  glMatrixMode(GL_MODELVIEW); 

  // Zastapienie aktywnej macierzy macierza jednostkowa 
  glLoadIdentity(); 

  // Ustalenie polozenia obserwatora 
  glTranslatef(0, 0, -obserwator_odleglosc); 
  glRotatef(obserwator_obrot_x, 1, 0, 0); 
  glRotatef(obserwator_obrot_y, 0, 1, 0); 
  glRotatef(obserwator_obrot_z, 0, 0, 1); 

  // Narysowanie szescianu 
  RysujSzescian(bok, l_podz); 

  // Przelaczenie buforow ramki 
  glutSwapBuffers(); 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Funkcja obslugi klawiatury 
void ObslugaKlawiatury(unsigned char klawisz, int x, int y) 
{ 
  /* 
  if(klawisz == '+') 
      bok *= 2.0; 
  else if (klawisz == '-') 
      bok /= 2.0; 
  */ 
  if (klawisz == 27) 
      exit(0);      
  else if (klawisz == ']') 
  { 
      if (l_podz < 30) l_podz++; 
  } 
  else if (klawisz == '[') 
  { 
      if (l_podz > 6) l_podz--; 
  } 
  else if (klawisz == '-') 
      obserwator_odleglosc *= 0.9; 
  else if (klawisz == '+') 
      obserwator_odleglosc *= 1.1; 
  else if (klawisz == 's') 
      obserwator_obrot_x += 5; 
  else if (klawisz == 'w') 
      obserwator_obrot_x -= 5; 
  else if (klawisz == 'd') 
      obserwator_obrot_y += 5; 
  else if (klawisz == 'a') 
      obserwator_obrot_y -= 5; 
  else if (klawisz == 'q') 
      obserwator_obrot_z += 5; 
  else if (klawisz == 'e') 
      obserwator_obrot_z -= 5; 
} 


////////////////////////////////////////////////////////////////////////////////////////// 
// Glowna funkcja programu 
int  main(int argc, char **argv) 
{ 
  // Zainicjowanie biblioteki GLUT 
  glutInit(&argc, argv); 

  // Ustawienie trybu wyswietlania 
  glutInitDisplayMode (GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH); 

  // Ustawienie polozenia dolenego lewego rogu okna 
  glutInitWindowPosition(100, 100); 

  // Ustawienie rozmiarow okna 
  glutInitWindowSize(szerokoscOkna, wysokoscOkna); 

  // Utworzenie okna 
  glutCreateWindow("Szescian"); 

  // Odblokowanie bufora glebokosci 
  glEnable(GL_DEPTH_TEST); 

  // Ustawienie wartosci czyszczacej zawartosc bufora glebokosci 
  glClearDepth(1000.0); 

  // Ustawienie koloru czyszczenia bufora ramki 
  glClearColor (0.0f, 0.0f, 0.3f, 0.0f); 

  // Wlaczenie wyswietlania wielokatow w postaci obrysow (przydatne w celach diagnostycznych). 
  glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); 
  
  // Zarejestrowanie funkcji (callback) odpowiedzialnej za 
  glutDisplayFunc(WyswietlObraz); 

  // Zarejestrowanie funkcji (callback) wywolywanej za kazdym razem kiedy 
  // zmieniane sa rozmiary okna 
  glutReshapeFunc(UstawParametryWidoku); 

  // Zarejestrowanie funkcji wykonywanej gdy okno nie obsluguje 
  // zadnych zadan 
  glutIdleFunc(WyswietlObraz); 

  // Zarejestrowanie funkcji obslugi klawiatury 
  glutKeyboardFunc(ObslugaKlawiatury); 

  // Obsluga glownej petli programu (wywolywanie zarejestrowanych callbackow 
  // w odpowiedzi na odbierane zdarzenia lub obsluga stanu bezczynnosci) 
  glutMainLoop(); 

  return 0; 
}


Najwazniejsza jest funkcja RysujSzescian() Nalezy zwrócic uwage na definiowanie polozenia kolejnych wierzcholków w tych przypadkach czworoscianów. Pierscienie to tylko jedna z mozliwosci. Nalezy spodziewac sie róznych bryl obrotowych. 
Aby uruchomic powyzsze przyklady trzeba miec zainstalowane oraz pokonfigurowane w uzywanym IDE biblioteki OpenGL i Glut 

Jesli nie bedzie tego, to bedzie zapewne to co na drugich cwiczeniach - czyli modelowanie obiektów za pomoca przeksztalcania prymitywów przestrzennych (zadanie z wieza cw).