/////////////////////algorytm rho-Pollarda 	Damian Krata I4D1S1

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <math.h>
#include <conio.h>
#include <iomanip>

using namespace std;

long long int *liczba_dodawana;
long long int *ktory_wiersz;
long long int *iloczyn;
long long int *globalTableCheck;
long long int *globalTable;
long long int **globalMatrix;
long long int *wiersze;
long long int *kolumny;


const double eps = 1e-12; // sta³a przybli¿enia zera
//////////////////////////// GAUSS OD WIECHCIA
int* gaussJordan(int variables, int** factors){

	int col = 0, j = 0, row = 0;
	for (col = 0; col<variables; col++){
		if (!factors[col][col]){
			row = (col + 1) % variables;
			while (!factors[row][col] && row != col){
				row = (row + 1) % variables;
			}
			for (j = 0; j<variables; j++) factors[col][j] = factors[col][j] ^ factors[row][j];
		}
		row = (col + 1) % variables;
		while (row != col){
			if (factors[row][col]){
				for (j = 0; j<variables; j++) factors[row][j] = factors[row][j] ^ factors[col][j];
			}
			row = (row + 1) % variables;
		}
	}
	//int valid[variables];
	int *valid = new int[variables];
	for (j = 0; j < variables; j++){
		valid[j] = -1;
		int i, check = 0;
		for (i = 0; i<variables; i++) {
			if (factors[j][i]) check++;
		}
		if (check == 0) valid[j] = 1;
		else if (check == 1) valid[j] = 0;
	}
	bool xorV = 0;
	for (j = 0; j<variables; j++){
		if (valid[j] != -1) xorV ^= valid[j];
	}
	if (!xorV){
		bool changed = 0;
		for (int i = 0; i<variables; i++){
			if (valid[i] == -1) {
				if (changed) valid[i] = 0;
				else {
					valid[i] = 1;
					changed = 1;
				}
			}
		}
	}
	int resultSize = 0;
	for (int i = 0; i<variables; i++) resultSize += valid[i];
	if (resultSize == 0) return NULL;
	else {
		int *result = new int[resultSize];
		j = 0;
		for (int i = 0; i<variables; i++){
			if (valid[i] == 1) result[j] = i;
			i++;
		}
	}

	/*for (int i = 0; i < variables; i++)
	{
		cout << " i =ta" << i << " zmienna wynosi   " << result[i] << endl;
	}*/

}

// Funkcja realizuje algorytm eliminacji Gaussa
//---------------------------------------------
bool gauss(int n, double ** AB, double * X)
{

	int i, j, k;
	double m, s;

	// eliminacja wspó³czynników

	for (i = 0; i < n - 1; i++)
	{
		for (j = i + 1; j < n; j++)
		{
			if (fabs(AB[i][i]) < eps) return false;
			m = -AB[j][i] / AB[i][i];
			for (k = i + 1; k <= n; k++)
				AB[j][k] += m * AB[i][k];
		}
	}

	// wyliczanie niewiadomych

	for (i = n - 1; i >= 0; i--)
	{
		s = AB[i][n];
		for (j = n - 1; j >= i + 1; j--)
			s -= AB[i][j] * X[j];
		if (fabs(AB[i][i]) < eps) return false;
		X[i] = s / AB[i][i];
	}
	return true;
}

void gauss_damian(long long int liczba_rownan,long long int **AB,long long int *X)
{
	long long int col = 0, j = 0, row = 0;
	for (col = 0; col<liczba_rownan; col++){
		if (!AB[col][col]){
			row = (col + 1) % liczba_rownan;
			while (!AB[row][col] && row != col){
				row = (row + 1) % liczba_rownan;
			}
			for (j = 0; j<liczba_rownan; j++) AB[col][j] = AB[col][j] ^ AB[row][j];
		}
		row = (col + 1) % liczba_rownan;
		while (row != col){
			if (AB[row][col]){
				for (j = 0; j<liczba_rownan; j++) AB[row][j] = AB[row][j] ^ AB[col][j];
			}
			row = (row + 1) % liczba_rownan;
		}
	}

	for (long long int i = 0; i < liczba_rownan; ++i, cout << endl)
	for (long long int j = 0; j < liczba_rownan; ++j)
		cout << AB[i][j] << " ";

	//long long int col = 0;
	long long int suma;
	bool ksor = 0;
	for (row = 0; row < liczba_rownan; row++)
	{
		suma = 0;
		for (col = 0; col < liczba_rownan; col++)
		{
			suma += AB[row][col];
		}
		if (suma == 0)
		{
			X[row] = 1;
			cout << "x " << row + 1 << "=1" << endl;
		}
		else if (suma == 1)
		{
			X[row] = 0;
			cout << "x " << row + 1 << "=0" << endl;
		}

	}
		cout << "tablica X" << endl;
		for (long long int i = 0; i < liczba_rownan; i++)
		{
			cout << "   " << X[i];
		}

	
	for (row = 0; row < liczba_rownan; row++)
	{
		long long int suma_ustalonych=0;
		for (col = 0; col < liczba_rownan; col++)
		{
			if (X[col] != -1)
				suma_ustalonych += AB[row][col];
		}
		if (suma_ustalonych % 2 == 0)
		{
			for (col = 0; col < liczba_rownan; col++)
			{
				if ((AB[row][col] == 1) && (X[col] == -1))
				{
					X[col] = 0;
				}
			}
		}
		else
		{
			for (col = 0; col < liczba_rownan; col++)
			{
				if ((AB[row][col] == 1) && (X[col] == -1))
				{
					X[col] = 1;
					break;
				}
			}
		}
	}
	cout << endl;
	cout << "tablica X" << endl;
	for (long long int i = 0; i < liczba_rownan; i++)
	{
		cout << "   " << X[i];
	}
}


long long int NWD(long long int a, long long int b)
{
	if (b == 0)
		return a;
	else return NWD(b, a%b);
}
long long int losowanie(long long int poczatek, long long int koniec)
{
	long long int przypadkowa = rand();
	return poczatek + (przypadkowa % (koniec - poczatek));
}

int Oblicz_B(long long int n)
{
	double tmp = (double)n;
	return (int)(exp(0.5*(sqrt(log(tmp)*log(log(tmp)))))) + 1;
}


long long int symbol_jacobiego(long long int a, long long int n)
{
	if (a<0)
	{
		cout << "podales bledna liczbe" << endl;
	}
	if (a == 0)
	{
		return 0;
	}
	if ((n % 2 == 1) && (a>n))
	{
		//cout<<"wchodze tu"<<endl;
		return symbol_jacobiego(a%n, n);
	}

	if (a == 1)
	{
		return 1;
	}

	if ((a == 2) && ((n % 8 == 1) || (n % 8 == 7)))
	{
		//cout<<"a=2, mod8"<<endl;
		return 1;
	}

	if ((a == 2) && ((n % 8 == 3) || (n % 8 == 5)))
	{
		//cout<<"a=2, mod8 i 3"<<endl;
		return -1;
	}

	if ((a % 2 == 0) && ((n % 8 == 1) || (n % 8 == 7)))
	{
		//cout<<"dzielenie"<<endl;
		return symbol_jacobiego(a / 2, n);
	}
	else if ((a % 2 == 0))
	{
		//cout<<"dzielenie z minusikiem"<<endl;
		return -1 * symbol_jacobiego(a / 2, n);
	}

	if ((a % 4 == 3) && (n % 4 == 3))
	{
		//cout<<"mod4=3"<<endl;

		return -1 * symbol_jacobiego(n, a);
	}
	else
	{
		//cout<<"haha"<<endl;
		return symbol_jacobiego(n, a);
	}

}
long long int potega_modulo(long long int podstawa, long long int wykladnik, long long int modulnik)
{
	long long int result = 1;
	long long int a = podstawa%modulnik;
	//cout<<a<<"	a	";
	long long int x = a;
	//cout<<x<<"	x	";
	int pomoc;

	do
	{
		//cout<<"wykladnik jest rowny"<<wykladnik<<endl;
		pomoc = wykladnik % 2;
		//cout<<pomoc<<endl;
		if (pomoc == 1)
		{

			result = result*x;
			result = result%modulnik;
			x = x*x;
			x = x%modulnik;
		}
		else
		{
			x = x*x;
			x = x%modulnik;
		}
		wykladnik >>= 1;
		//cout<<"	x	"<<x<<endl;
	} while (wykladnik != 0);

	return result;
}
long long int absolute(long long int a)
{
	if (a >= 0)
	{
		return a;
	}
	else
		return -a;
}

bool test_pierwszosci(long long int n)
{
	bool test = true;
	long long int a, b, c;
	if (n == 1)
		return false;
	if (n == 2)
		return true;
	if (n == 3)
		return true;
	for (int j = 0; j<100; j++)
	{
		a = losowanie(2, n - 1);
		//cout<<a<<endl;
		b = potega_modulo(a, ((n - 1) / 2), n);
		//cout<<"liczba b:	"<<b<<endl;
		c = symbol_jacobiego(a, n);
		//cout<<"liczba c:	"<<c<<endl;
		if (b>(n / 2))
		{
			b = b - n;
		}
		if (c == b)
		{
			//cout<<"n jest liczba pierwsza dla "<<a<<endl;
			test = true;
		}
		else
		{
			//cout<<"chyba nie"<<endl;
			test = false;
			break;
		}
	}
	if (test)
		return true;
	else
		return false;
}

void funkcja_dzielaca(long long int k, long long int a, long long int modulnik, long long int rozmiar_tab) //liczba k, liczba który wiersz, tablica,modulnik,rozmiar tab
{
	globalMatrix[k][0] = k;
	globalMatrix[k][1] = a + k;
	globalMatrix[k][2] = potega_modulo(a + k, 2, modulnik);
	if (globalMatrix[k][2] < 0)
	{
		globalMatrix[k][3] = 1;
		globalMatrix[k][3 + rozmiar_tab] = 1;
	}
	else
	{
		globalMatrix[k][3] = 0;
		globalMatrix[k][3 + rozmiar_tab] = 0;
	}

	for (long long int i = 1; i < rozmiar_tab; i++)
	{
		long long int czynnik = 0;
		long long int liczba = abs(globalMatrix[k][2]);
		while ((liczba % globalTable[i]) == 0)
		{
			liczba /= globalTable[i];
			czynnik++;
		}
		globalMatrix[k][i + 3] = czynnik;
	}

	for (long long int i = 1; i <= rozmiar_tab; i++)
	{
		globalMatrix[k][2 + rozmiar_tab+i] =( globalMatrix[k][i + 3])%2;
	}
}

void funkcja_sprawdzajaca(long long int k, long long int a, long long int modulnik, long long int rozmiar_tab) //liczba k, liczba który wiersz, tablica,modulnik,rozmiar tab=licznik
{
	globalTableCheck[0] = k;
	globalTableCheck[1] = a + k;
	globalTableCheck[2] = potega_modulo(a + k, 2, modulnik);
	if (globalTableCheck[2] > modulnik / 2)
		globalTableCheck[2] -= modulnik;
	if (globalTableCheck[2] < 0)
	{
		globalTableCheck[3] = 1;
		globalTableCheck[3 + rozmiar_tab] = 1;
	}
	else
	{
		globalTableCheck[3] = 0;
		globalTableCheck[3+ rozmiar_tab] = 0;
	}

	for (long long int i = 1; i < rozmiar_tab; i++)
	{
		long long int czynnik = 0;
		long long int liczba = abs(globalTableCheck[2]);
		while ((liczba % globalTable[i]) == 0)
		{
			liczba /= globalTable[i];
			czynnik++;
		}
		globalTableCheck[i + 3] = czynnik;
	}

	for (long long int i = 1; i <= rozmiar_tab; i++)
	{
		globalTableCheck[3 + rozmiar_tab + i] = (globalTableCheck[i + 3]) % 2;
	}
	*iloczyn = 1;
	for (long long int i = 0; i < rozmiar_tab; i++)
	{
		*iloczyn = (*iloczyn)*(pow(globalTable[i],globalTableCheck[i + 3]));
	}

	//for (long long int j = 0; j < *kolumny; j++)
	//	cout << globalTableCheck[j] << +"    ";

	//cout << "iloczyn jest rowny  " << *iloczyn << endl;
	//cout << "operacja byla wykonywana dla wiersza nr " << *ktory_wiersz << endl;
	if (*iloczyn == globalTableCheck[2])
	{
		for (long long int i = 0; i < *kolumny; i++)
		{
			globalMatrix[*ktory_wiersz][i] = globalTableCheck[i];
		}
		(*ktory_wiersz)++;
		(*liczba_dodawana)++;
	}
	else
	{
		(*liczba_dodawana)++;
	}
}
int main(int argc, char* argv[])
{
	bool test = true;
	srand(time(NULL));
	long long int a, b;
	long long int d;
	long long int n;
	long long int c;
	a = 2;
	b = 2;
	d = 1;
	//cout<<"Wprowadz liczbe n "<<endl;
	//cin>>n;
	n = atoll(argv[1]);
	long long int podloga = sqrt(n)/1;
	cout << "podloga    " << podloga << endl;
	//////////////////////////////// najpierw test pierwszosci

	for (int j = 0; j<100; j++)
	{
		a = losowanie(2, n - 1);
		//cout<<a<<endl;
		b = potega_modulo(a, ((n - 1) / 2), n);
		//cout<<"liczba b:	"<<b<<endl;
		c = symbol_jacobiego(a, n);
		//cout<<"liczba c:	"<<c<<endl;
		if (b>(n / 2))
		{
			b = b - n;
		}
		if (c == b)
		{
			//cout<<"n jest liczba pierwsza dla "<<a<<endl;
			test = true;
		}
		else
		{
			//cout<<"chyba nie"<<endl;
			test = false;
			break;
		}
	}
	if (test)
		cout << "1" << endl;
	else
		cout << "0" << endl;
	//////////////////////////// zaczynamy wlasciwa czesc sita
	int B = Oblicz_B(n);
	cout << "dla n=527773 mamy " << B << endl;
	// teraz zrobimy sobie tablice licz wzglêdnie pierwszych z wynikiem
	long long int *tab = new long long int[B + 1];
	tab[0] = -1;
	for (int i = 1; i < B+1; i++)
	{
		if ((test_pierwszosci(i)) == true)
		{
			if (i == 2)
				tab[i] = 2;
			else
			{
				if (symbol_jacobiego(n,i) == 1)
					tab[i] = i;
				else
					tab[i] = 0;
			}

		}
		else
			tab[i] = 0;
	}
	for (int m = 0; m < B+1; m++)
		cout << tab[m]<<"  ";

	////////liczymy ile jest niezerowych
	long long int licznik = 0;
	for (int m = 0; m < B+1; m++)
	{
		if (tab[m] != 0)
			licznik++;
	}
	cout << "hej lalal"<<licznik;
	///// robimy tablice niezerowych		licznik to iloæ elementów w tej nowej tablicy ju¿ bazie
	long long int *tablica = new long long int[licznik];
	int i = 0;
	for (int m = 0; m < B+1; m++)
	{
		if (tab[m] != 0)
		{
			tablica[i] = tab[m];
			i++;
		}
	}
	cout << "nowa" << endl;
	for (long long int k = 0; k<licznik; k++)
		cout << tablica[k];

	kolumny = new long long int;
	wiersze = new long long int;
	ktory_wiersz = new long long int;
	liczba_dodawana = new long long int;
	iloczyn = new long long int;

	*liczba_dodawana = 0;
	*ktory_wiersz = 0;
	*kolumny = 2*licznik+3;
	*wiersze = 2 * (*kolumny);
	cout << licznik << "licznik" << *kolumny << "wiersze " << *wiersze;
	//////////////////////////// inicjalizacja globalTable
	globalTable = new long long int[licznik];
	for (long long int k = 0; k < licznik; k++)
	{
		globalTable[k] = tablica[k];
	}
	///////////////////////// inicjalizacja globalTableCheck

	globalTableCheck = new long long int[*kolumny];

	/////////////////////////// inicjalizacja globalMatrix
	globalMatrix = new long long int *[*wiersze];
	for (long long int i = 0; i < *wiersze; ++i)
	{
		globalMatrix[i] = new long long int[*kolumny];
			for (long long int j = 0; j < *kolumny; ++j)
				globalMatrix[i][j] = (i + j) ;
	}
	cout << endl;
	for (long long int i = 0; i < *wiersze; ++i, cout << endl)
	for (long long int j = 0; j < *kolumny; ++j)
		cout << globalMatrix[i][j] <<"       ";
	/////////////////////////////////////////////////////////////////////////////// ROBOTA

	/*for (long long int m = 0; m < *wiersze; m++)
	{
		funkcja_dzielaca(m,podloga,527773,licznik);
	}
	
	cout << globalMatrix[0][0];*/
	while (*ktory_wiersz < *wiersze)
	{
		funkcja_sprawdzajaca(*liczba_dodawana, podloga, n, licznik);
	}
	/*cout << "ktory wiersz   " << *ktory_wiersz << endl;
	cout << "liczba dodawana  " << *liczba_dodawana << endl;
	funkcja_sprawdzajaca(*liczba_dodawana, podloga, n, licznik);
	cout << "ktory wiersz   " << *ktory_wiersz << endl;
	cout << "liczba dodawana  " << *liczba_dodawana << endl;
	funkcja_sprawdzajaca(*liczba_dodawana, podloga, n, licznik);
	cout << "ktory wiersz   " << *ktory_wiersz << endl;
	cout << "liczba dodawana  " << *liczba_dodawana << endl;
	funkcja_sprawdzajaca(*liczba_dodawana, podloga, n, licznik);
	cout << "ktory wiersz   " << *ktory_wiersz << endl;
	cout << "liczba dodawana  " << *liczba_dodawana << endl;*/
	cout << endl;
	for (long long int i = 0; i < *wiersze; ++i, cout << endl)
	for (long long int j = 0; j < *kolumny; ++j)
		cout << globalMatrix[i][j] << "       ";

//////////////////////////// przechodzimy do gaussa
	long long int **AB, *X;
	int      ilosc_zmiennych;
	ilosc_zmiennych = licznik;
	AB = new long long int *[ilosc_zmiennych];
	X = new long long int[ilosc_zmiennych];

	for (int i = 0; i < ilosc_zmiennych; i++) AB[i] = new long long int[ilosc_zmiennych + 1];

	for (long long int i = 0; i < ilosc_zmiennych; i++)
	{
		X[i] = -1;
	}
	// odczytujemy dane dla macierzy AB

	for (int i = 0; i < ilosc_zmiennych; i++)
	for (int j = 0; j < ilosc_zmiennych; j++)
	{
		AB[j][i]=globalMatrix[i][j+licznik+3];
	}
	for (int i = 0; i < ilosc_zmiennych; i++)
		AB[i][ilosc_zmiennych] = 0;

	//////////////////////// wypisujemy macierz
	for (long long int i = 0; i < ilosc_zmiennych; ++i, cout << endl)
	for (long long int j = 0; j <= ilosc_zmiennych; ++j)
		cout << AB[i][j] << " ";
	///////////////////////////////////
	/*if (gauss_damian(n, AB, X))
	{
		for (i = 0; i < n; i++)
			cout << "x" << i + 1 << " = " << setw(9) << X[i]
			<< endl;
	}
	else
		cout << "DZIELNIK ZERO\n";
	*/
	// usuwamy macierze z pamiêci

	cout << endl;

	gauss_damian(licznik, AB, X);

	for (i = 0; i < ilosc_zmiennych; i++) delete[] AB[i];
	delete[] AB;
	delete[] X;

	
	
	_getch();
	return 0;
}


